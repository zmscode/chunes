/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as SearchRouteImport } from './routes/search'
import { Route as RecentRouteImport } from './routes/recent'
import { Route as PlaylistsRouteImport } from './routes/playlists'
import { Route as LibraryRouteImport } from './routes/library'
import { Route as FavouritesRouteImport } from './routes/favourites'
import { Route as IndexRouteImport } from './routes/index'

const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const RecentRoute = RecentRouteImport.update({
  id: '/recent',
  path: '/recent',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaylistsRoute = PlaylistsRouteImport.update({
  id: '/playlists',
  path: '/playlists',
  getParentRoute: () => rootRouteImport,
} as any)
const LibraryRoute = LibraryRouteImport.update({
  id: '/library',
  path: '/library',
  getParentRoute: () => rootRouteImport,
} as any)
const FavouritesRoute = FavouritesRouteImport.update({
  id: '/favourites',
  path: '/favourites',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRoute
  '/recent': typeof RecentRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRoute
  '/recent': typeof RecentRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/favourites': typeof FavouritesRoute
  '/library': typeof LibraryRoute
  '/playlists': typeof PlaylistsRoute
  '/recent': typeof RecentRoute
  '/search': typeof SearchRoute
  '/settings': typeof SettingsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/favourites'
    | '/library'
    | '/playlists'
    | '/recent'
    | '/search'
    | '/settings'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/favourites'
    | '/library'
    | '/playlists'
    | '/recent'
    | '/search'
    | '/settings'
  id:
    | '__root__'
    | '/'
    | '/favourites'
    | '/library'
    | '/playlists'
    | '/recent'
    | '/search'
    | '/settings'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  FavouritesRoute: typeof FavouritesRoute
  LibraryRoute: typeof LibraryRoute
  PlaylistsRoute: typeof PlaylistsRoute
  RecentRoute: typeof RecentRoute
  SearchRoute: typeof SearchRoute
  SettingsRoute: typeof SettingsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/recent': {
      id: '/recent'
      path: '/recent'
      fullPath: '/recent'
      preLoaderRoute: typeof RecentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/playlists': {
      id: '/playlists'
      path: '/playlists'
      fullPath: '/playlists'
      preLoaderRoute: typeof PlaylistsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/library': {
      id: '/library'
      path: '/library'
      fullPath: '/library'
      preLoaderRoute: typeof LibraryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/favourites': {
      id: '/favourites'
      path: '/favourites'
      fullPath: '/favourites'
      preLoaderRoute: typeof FavouritesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  FavouritesRoute: FavouritesRoute,
  LibraryRoute: LibraryRoute,
  PlaylistsRoute: PlaylistsRoute,
  RecentRoute: RecentRoute,
  SearchRoute: SearchRoute,
  SettingsRoute: SettingsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
